<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

class Customer extends MX_Controller {

    function __construct() {
        parent::__construct();
        $this->load->model('user_model');
        $last = end($this->uri->segments);
        if ($last != 'login') {
            is_logged_in();
        }
        $this->load->library(array('form_validation'));
	$this->form_validation->run($this);
    }
    
    public function customer_list() {
        $data['section_name'] = "Customer Management";
        $data['page_title'] = $data['site_title'] = "All Customer";
        $data['pageUrl'] = $pageUrl = base_url($this->session->userdata('admins')['user_type'] . '/customer');
        $data['breadcrumb'] = '<ol class="breadcrumb float-sm-right">'
                . '<li class="breadcrumb-item"><a href="' . $pageUrl . '/customer_list">' . $data['page_title'] . '</a></li>'
                . '</ol>';
        $data['response'] = $this->user_model->getUserList('2','','','','users.id','desc');
        _manage_template('templates/header', 'templates/footer', 'customer/list', $data, 'templates/left_adminMenu');
    }
    
    function userProflephoto() {
        if(!empty($_FILES) && !empty($_FILES['user_photo']['name'])){
            $filename = $_FILES['user_photo']['name'];
            $file_extension= _getExtension($filename);
            $allowed_size  = 109715; //5000000;//5mb-2Mb
            $allowed_extension = array('jpg', 'jpeg', 'JPG', 'JPEG', 'gif', 'GIF', 'png', 'PNG');
            if (!in_array($file_extension, $allowed_extension)) {
                $this->form_validation->set_message('userProflephoto', 'The filetype you are attempting to upload is not allowed.');
                return FALSE;
            }else if ($_FILES['user_photo']['size'] > $allowed_size) {
                $this->form_validation->set_message('userProflephoto', 'The file you are attempting to upload is larger than the permitted size.');
                return FALSE;
            }else{
                return TRUE;
            }
        }else{
            return TRUE;
        }
    }
    
    function checkDateFormat($date) {
        if (preg_match("/[0-31]{2}/[0-12]{2}/[0-9]{4}/", $date)) {
            if(checkdate(substr($date, 3, 2), substr($date, 0, 2), substr($date, 6, 4)))
                return true;
            else
                return false;
        } else {
            return false;
        }
    }
    
    function validateAge($date) {
        if(!empty($date)){
            $seletedDate = date('Y-m-d', strtotime($date));
            $currentDate = date('Y-m-d');
            $difference = dateDifference($currentDate,$seletedDate,'%y');
            if($difference>=18){
                return true;
            }else{
                $this->form_validation->set_message('validateAge', 'Age Must be greater than 18 Years.');
                return false;
            }
        }
    }
    
    public function validateEmail($str,$paramTwo) {
        $response = $this->user_model->validateEmail($str, $paramTwo);
        if (empty($response)) {
            return TRUE;
        }else{
            $this->form_validation->set_message('validateEmail', 'Email ID already registered!');
            return FALSE;
        }
    }
    
    function _alpha_dash_space($str_in = '')
	{
		if($str_in != '') {   
			if (! preg_match("/^([a-z ])+$/i", $str_in))
			{
				$this->form_validation->set_message('_alpha_dash_space', 'The %s field may only contain alphabets and spaces.');
				return FALSE;
			}else{
				return TRUE;
			}
		} else {
			return TRUE;
		}
	}

    public function create() {
        $data['section_name'] = "Create Customer";
        $data['page_title'] = $data['site_title'] = "Create Customer";
        $data['pageUrl'] = $pageUrl = base_url($this->session->userdata('admins')['user_type'] . '/customer/create');
        $data['breadcrumb'] = '<ol class="breadcrumb float-sm-right">'
            . '<li class="breadcrumb-item"><a href="' . base_url($this->session->userdata('admins')['user_type']. '/customer/customer_list') . '">Customer</a></li><li class="breadcrumb-item"><a href="' . $pageUrl . '">' . $data['page_title'] . '</a></li>'
            . '</ol>';
        $data['countryList'] = $this->user_model->getCountryList();
        if($this->input->server('REQUEST_METHOD')==="POST"){
            $this->form_validation->set_rules('user_name', 'Customer Name', 'trim|callback__alpha_dash_space|required|min_length[2]');
            $this->form_validation->set_rules('user_email', 'Email address', 'trim|required|valid_email|is_unique[nw_user_tbl.email]');
            $this->form_validation->set_rules('password', 'Password', 'required|min_length[6]');
            $this->form_validation->set_message('is_unique', 'Email ID already registered!');
            $this->form_validation->set_rules('user_mobile', 'Mobile Number', 'trim|required|min_length[10]|max_length[10]|regex_match[/^[0-9]{10}$/]|numeric');
            $this->form_validation->set_rules('user_dob', 'Date of Birth', 'trim|callback_validateAge');
            $this->form_validation->set_rules('user_country', 'Country', 'trim');
            $this->form_validation->set_rules('user_state', 'State', 'trim');
            $this->form_validation->set_rules('customer_city', 'City', 'trim|min_length[2]|callback__alpha_dash_space');
            
            //$this->form_validation->set_rules('customer_city', 'City', '');
            
            $this->form_validation->set_rules('user_address', 'Address', 'trim|max_lenght[100]');
            $this->form_validation->set_rules('pin_code', 'Pin Code', 'trim|exact_length[6]|numeric');
            $this->form_validation->set_rules('user_gender', 'Gender', 'trim');
            $this->form_validation->set_rules('user_status', 'Status', 'trim');
            $this->form_validation->set_rules('user_photo', 'Profile Picture', 'callback_userProflephoto');
            if ($this->form_validation->run()) {
                $responce = $this->user_model->createNewUsers('nw_user_tbl', [
                    'user_type' => 2,
                    'email'     => $this->input->post('user_email'),
                    'password'  => md5($this->input->post('password')),
                    'status'    => (int)$this->input->post('user_status'),
                    'created'   => date('Y-m-d H:i:s'),
                    'last_login'=> date('Y-m-d H:i:s'),
                    'login_status'=> 0,
                    'activation_code'=> md5('test@123')
                ]);
                if ($responce) {
                    if(!empty($_FILES) && !empty($_FILES['user_photo']['name'])){
                        $filename = $_FILES['user_photo']['name'];
                        $tmp_path = $_FILES['user_photo']['tmp_name'];
                        $image_name = uploadImage($filename, $tmp_path, 'profile', '140');
                    }else{
                        $image_name = '';
                    }
                    $countrydata= $this->user_model->getCountryList($this->input->post('user_country'));
                    $countryName= ($countrydata !='') ? $countrydata->name:'';
                    $stateList  = $this->user_model->getStateList($this->input->post('user_state'));
                    $stateName  = ($stateList !='') ? $stateList->name:'';
                    $cityName   = $this->input->post('customer_city');
                    $getGeoData = _getGEOLocationByAddress($countryName.','.$stateName.','.$this->input->post('user_address').','.$cityName);
                    $dob = date('Y-m-d',strtotime($this->input->post('user_dob')));
                    $this->user_model->createNewUsers('nw_customer_tbl', [
                        'user_id'   => $responce,
                        'name'      => $this->input->post('user_name'),
                        'dob'       => $dob,
                        'gender'    => $this->input->post('user_gender'),
                        'address'   => $this->input->post('user_address'),
                        'country_id'=> $this->input->post('user_country'),
                        'state_id'  => $this->input->post('user_state'),
                        'city_id'   => $cityName,
                        'zip'       => $this->input->post('pin_code'),
                        'mobile'    => $this->input->post('user_mobile'),
                        'photo'     => $image_name,
                        'latitude'  => ($getGeoData !='') ? $getGeoData['lat']:'',
                        'longitude' => ($getGeoData !='') ? $getGeoData['long']:'',
                        'status'    => 1,
                        'created'   => date('Y-m-d H:i:s')
                    ]);
                    $wordpress_data = array(
                        'user_login' => $this->input->post('user_email'),
                        'user_email' => $this->input->post('user_email'),
                        'user_pass'  => md5($this->input->post('password')),
                        'user_registered' => date('Y-m-d H:i:s')
                    );
                    $this->user_model->create_wordpress_user($wordpress_data);
                    $this->session->set_flashdata('responce_msg',array('class'=>SUCCESS_ALERT,'short_msg' =>'SUCCESS','message'=>'Customer has been created successfully.'));
                    redirect(base_url($this->session->userdata('admins')['user_type'].'/customer/customer_list'));
                }else {
                    $this->session->set_flashdata('responce_msg',array('class'=>DANGER_ALERT,'short_msg' =>'WORNING','message'=>'Something went wrong.'));
                }
            }
        }
        _manage_template('templates/header', 'templates/footer', 'customer/create', $data, 'templates/left_adminMenu');
    }
        
    public function view() {
        $id = $this->uri->segment(4);
        if(empty($id)){
            redirect(base_url($this->session->userdata('admins')['user_type'].'/customer/customer_list'));
        };
        $data['section_name'] = "Customer Management";
        $data['page_title'] = $data['site_title'] = "Customer View";
        $data['pageUrl'] = $pageUrl = base_url($this->session->userdata('admins')['user_type'].'/customer');
        $data['breadcrumb'] = '<ol class="breadcrumb float-sm-right">'
            . '<li class="breadcrumb-item"><a href="'.$pageUrl.'/view/'.$id.'">' . $data['page_title'] . '</a></li></ol>';
        $data['row'] = $this->user_model->getCustomer($id);
        _manage_template('templates/header', 'templates/footer', 'customer/view', $data, 'templates/left_adminMenu');
    }

    public function edit() {
        $id = $this->uri->segment(4);
        if(empty($id)){
            redirect(base_url($this->session->userdata('admins')['user_type'].'/customer/customer_list'));
        };
        $data['section_name']= "Customer Management";
        $data['page_title']  = $data['site_title'] = "Edit Customer";
        $data['pageUrl']     = $pageUrl = base_url($this->session->userdata('admins')['user_type']. '/customer/edit/'.$id);
        $data['breadcrumb']  = '<ol class="breadcrumb float-sm-right">'
                . '<li class="breadcrumb-item"><a href="' . base_url($this->session->userdata('admins')['user_type']. '/customer/customer_list') . '">Customer</a></li>'
                . '<li class="breadcrumb-item"><a href="' . $pageUrl.'">' . $data['page_title'] . '</a></li></ol>';
        $data['coustomer']   = $customerData = $this->user_model->getCustomer($id);
        $data['countryList'] = $this->user_model->getCountryList();
        if($this->input->server('REQUEST_METHOD')==="POST"){
            $this->form_validation->set_rules('user_name', 'Customer Name', 'trim|required|min_length[2]|callback__alpha_dash_space');
            $this->form_validation->set_rules('user_email', 'Email address', 'trim|required|valid_email|callback_validateEmail['.$id.']');
            $this->form_validation->set_rules('password', 'Password', 'min_length[6]');
            $this->form_validation->set_rules('user_mobile', 'Mobile Number', 'trim|required|exact_length[10]|regex_match[/^[0-9]{10}$/]');
            $this->form_validation->set_rules('user_dob', 'Date of Birth', 'trim|callback_validateAge');
            $this->form_validation->set_rules('user_country', 'Country', 'trim');
            $this->form_validation->set_rules('user_state', 'State', 'trim');
            $this->form_validation->set_rules('user_city', 'City', 'trim|min_length[2]|callback__alpha_dash_space');
            $this->form_validation->set_rules('user_address', 'Address', 'trim');
            $this->form_validation->set_rules('pin_code', 'Pin Code', 'trim|exact_length[6]|numeric');
            $this->form_validation->set_rules('user_gender', 'Gender', 'trim');
            $this->form_validation->set_rules('user_status', 'Status', 'trim');
            $this->form_validation->set_rules('user_photo', 'Profile Picture', 'callback_userProflephoto');
            if ($this->form_validation->run()) {
                $countrydata= $this->user_model->getCountryList($this->input->post('user_country'));
                $countryName= ($countrydata !='') ? $countrydata->name:'';
                $stateList  = $this->user_model->getStateList($this->input->post('user_state'));
                $stateName  = ($stateList !='') ? $stateList->name:'';
                $cityName   = $this->input->post('customer_city');
                $getGeoData = _getGEOLocationByAddress($countryName.','.$stateName.','.$this->input->post('user_address').','.$cityName);
                $updateArr = array(
                    'id'        => $id,
                    'name'      => $this->input->post('user_name'),
                    'mobile'    => $this->input->post('user_mobile'),
                    'dob'       => date('Y-m-d', strtotime($this->input->post('user_dob'))),
                    'address'   => $this->input->post('user_address'),
                    'country_id'=> $this->input->post('user_country'),
                    'state_id'  => $this->input->post('user_state'),
                    'city_id'   => $this->input->post('user_city'),
                    'zip'       => $this->input->post('pin_code'),
                    'gender'    => $this->input->post('user_gender'),
                    'latitude'  => ($getGeoData !='') ? $getGeoData['lat']:'',
                    'longitude' => ($getGeoData !='') ? $getGeoData['long']:'',
                    'modified'  => date('Y-m-d H:i:s')
                );
               
                if(!empty($_FILES) && !empty($_FILES['user_photo']['name'])){
                    $filename = $_FILES['user_photo']['name'];
                    $tmp_path = $_FILES['user_photo']['tmp_name'];
                    $image_name = uploadImage($filename, $tmp_path, 'profile', '140');
                    $updateArr['photo'] = $image_name;
                    unlinkImage('uploads/profile/',$customerData->photo);
                }
                $this->user_model->updateCustomer($updateArr);
                
                $user_data = array(
                    'user_id'   => $id,
                    'status'    => (int)$this->input->post('user_status'),
                    'email'     => $this->input->post('user_email'),
                    'modified'  => date('Y-m-d H:i:s')
                    );
                 if(!empty($this->input->post('password'))) {
                    $user_data['password'] = md5($this->input->post('password'));
                }
                $responce = $this->user_model->updateUser($user_data);
                
                $wordpress_data = array(
                        'user_login' => $this->input->post('user_email'),
                        'user_email' => $this->input->post('user_email')
                    );
                 if(!empty($this->input->post('password'))) {
                    $wordpress_data['user_pass'] = md5($this->input->post('password'));
                    }
                    //$this->user_model->update_wordpress_user($wordpress_data, $this->input->post('user_email'));
                $this->session->set_flashdata('responce_msg',array('class'=>SUCCESS_ALERT,'short_msg' =>'SUCCESS','message'=>'Customer record has been updated successfully.'));
                redirect(base_url($this->session->userdata('admins')['user_type'].'/customer/customer_list'));
            }
        }
        _manage_template('templates/header', 'templates/footer', 'customer/edit', $data, 'templates/left_adminMenu');
    }

    public function updateRecords() {
        $id = $this->input->post('uid');
        $status = $this->input->post('status');
        $action = $this->input->post('action');
        $table = $this->input->post('table');
        if($action=='delete'){
            $return = $this->user_model->deleteUsers($id,'nw_customer_tbl');
            $status = true;
            $message = 'Record has been Successfully deleted.';
            $style_color = 'green';
            $redirectURL = base_url($this->session->userdata('admins')['user_type']. '/customer/customer_list');
        }else{
            if($status=='1'){
                $statuss = 0;
            }else{
                $statuss = 1;
            }
            $return = $this->user_model->updateUser(array('user_id'=>(int)$id,"status"=>$statuss));
            $status = true;
            $message = 'Status has been updated successfully.';
            $style_color = 'green';
            $redirectURL = base_url($this->session->userdata('admins')['user_type']. '/customer/customer_list');
        }
        
        $ajaxResponse = json_encode(array('status' => $status, "message" => $message, 'style_color' => $style_color, 'redirectURL' => $redirectURL));
        echo $ajaxResponse;
    }
    
    

}
